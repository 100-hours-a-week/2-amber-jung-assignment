export const postDummy = [
  {
    title: 'React Hooks 완벽 활용법: useState와 useEffect 심화',
    like: 34,
    comment: 5,
    view: 420,
    createdAt: '2023-09-15 10:00:00',
    author: '홍길동',
    postId: '6e66f5f3-3c4e-4e24-9a8b-4b45c95f1bd1',
  },
  {
    title: 'CSS Grid를 이용한 반응형 레이아웃 구현 가이드',
    like: 27,
    comment: 3,
    view: 310,
    createdAt: '2023-09-16 11:15:00',
    author: '김철수',
    postId: 'a47d4a1d-1c1b-4e27-8e66-3eaab5d8d203',
  },
  {
    title: '모던 자바스크립트 ES2021 기능 정리 및 활용 팁',
    like: 45,
    comment: 8,
    view: 560,
    createdAt: '2023-09-17 09:30:00',
    author: '이영희',
    postId: 'f39877f8-34cd-4a74-8e9d-c7a3bb07a8a3',
  },
  {
    title: '프론트엔드 성능 최적화 전략과 도구 소개',
    like: 52,
    comment: 10,
    view: 680,
    createdAt: '2023-09-18 14:20:00',
    author: '박민수',
    postId: 'b0c5d9b8-c9e0-47b2-9f34-6a7b1f38ed23',
  },
  {
    title: 'Webpack으로 효율적인 코드 스플리팅 구현하기',
    like: 33,
    comment: 4,
    view: 4500,
    createdAt: '2023-09-19 16:45:00',
    author: '최수정',
    postId: 'f51d7687-9e45-4c87-8233-06fd1d9f2e3b',
  },
  {
    title: 'Redux Toolkit으로 간편한 상태 관리 시작하기',
    like: 60,
    comment: 12,
    view: 720,
    createdAt: '2023-09-20 08:50:00',
    author: '김민지',
    postId: 'd29ef3e9-2a6e-4c7f-8e2b-0e13f2d5c1f7',
  },
  {
    title: 'Next.js로 구축하는 SSR 웹 애플리케이션 입문',
    like: 38,
    comment: 6,
    view: 500,
    createdAt: '2023-09-21 12:00:00',
    author: '이정훈',
    postId: '1b0f81c3-5a60-4d3a-9e8f-3a5edb4c7d12',
  },
]
export const postDetailDummy = {
  '6e66f5f3-3c4e-4e24-9a8b-4b45c95f1bd1': {
    title: 'React Hooks 완벽 활용법: useState와 useEffect 심화',
    like: 34,
    comment: 5,
    view: 420,
    createdAt: '2023-09-15 10:00:00',
    author: '홍길동',
    content:
      '이 글에서는 React Hooks의 기본 사용법부터 심화 활용법까지 자세히 설명합니다. useState와 useEffect를 통해 상태 관리 및 부수 효과 처리를 효율적으로 다루는 방법을 소개합니다. 실제 예제 코드를 통해 개념을 명확하게 이해할 수 있습니다. 최신 React 버전에 맞춘 모범 사례도 함께 제공되며, 다양한 상황에서 발생할 수 있는 문제와 그 해결 방안을 사례별로 분석합니다. 또한, Hook을 사용하면서 개발자가 마주칠 수 있는 성능 이슈와 최적화 방법에 대해서도 심도 있게 다루며, 실무에서 바로 적용 가능한 팁들을 제공합니다. 이 글을 통해 독자들은 React Hooks의 강력한 기능을 체계적으로 익히고, 보다 효율적인 컴포넌트 설계 및 상태 관리 기법을 배울 수 있습니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  'a47d4a1d-1c1b-4e27-8e66-3eaab5d8d203': {
    title: 'CSS Grid를 이용한 반응형 레이아웃 구현 가이드',
    like: 27,
    comment: 3,
    view: 310,
    createdAt: '2023-09-16 11:15:00',
    author: '김철수',
    content:
      '이 게시글은 CSS Grid를 활용하여 다양한 화면 크기에 대응하는 반응형 레이아웃을 구현하는 방법을 상세히 다룹니다. 기본 속성과 고급 기술을 구분하여 설명하며, 단계별 예제를 통해 독자들이 쉽게 따라 할 수 있도록 구성했습니다. 레이아웃의 기초 개념부터 시작하여, Grid의 행과 열 설정, 영역 지정, 그리고 미디어 쿼리를 활용한 반응형 디자인 적용 방법을 심도 있게 분석합니다. 또한, 실제 프로젝트에서의 사용 사례와 함께, 디자인 패턴 및 유지보수에 유리한 코드 작성 방법을 소개합니다. 이 글을 통해 독자들은 CSS Grid의 강력한 기능을 이해하고, 다양한 디바이스에 최적화된 웹 페이지를 제작하는 방법을 배울 수 있습니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  'f39877f8-34cd-4a74-8e9d-c7a3bb07a8a3': {
    title: '모던 자바스크립트 ES2021 기능 정리 및 활용 팁',
    like: 45,
    comment: 8,
    view: 560,
    createdAt: '2023-09-17 09:30:00',
    author: '이영희',
    content:
      '이 글에서는 ES2021에 새롭게 도입된 자바스크립트 기능들을 체계적으로 정리하고, 각 기능의 실제 활용 방법에 대해 상세히 설명합니다. 새로운 문법과 API가 개발 생산성을 어떻게 높일 수 있는지 다양한 예제를 통해 확인할 수 있습니다. 또한, 최신 기능들을 기존 코드에 통합하는 과정에서 발생할 수 있는 호환성 문제와 해결 방안을 함께 논의합니다. 추가로, 실무에서 자주 사용되는 패턴과 모범 사례를 소개하여 독자들이 최신 자바스크립트 기능을 손쉽게 적용할 수 있도록 돕습니다. 이 글은 자바스크립트 개발자들이 최신 트렌드를 파악하고, 보다 효율적인 코드를 작성하는 데 큰 도움을 줄 것입니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  'b0c5d9b8-c9e0-47b2-9f34-6a7b1f38ed23': {
    title: '프론트엔드 성능 최적화 전략과 도구 소개',
    like: 52,
    comment: 10,
    view: 680,
    createdAt: '2023-09-18 14:20:00',
    author: '박민수',
    content:
      '프론트엔드 성능 최적화는 웹 사용자 경험 개선에 필수적인 요소입니다. 이 게시글은 다양한 최적화 전략과 함께, 코드 스플리팅, 캐싱, 이미지 최적화 등 구체적인 기술들을 실제 사례와 함께 소개합니다. 각 전략의 장단점과 구현 방법을 자세히 분석하며, 개발자가 쉽게 적용할 수 있는 도구와 라이브러리도 함께 다룹니다. 또한, 성능 모니터링과 측정 방법에 대해서도 설명하여, 최적화된 웹 애플리케이션을 구축하는 데 필요한 종합적인 가이드를 제공합니다. 이 글을 통해 독자들은 프론트엔드 성능 향상에 필요한 모든 요소를 이해하고, 실무에서 바로 적용 가능한 최적화 기법을 배울 수 있습니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  'f51d7687-9e45-4c87-8233-06fd1d9f2e3b': {
    title: 'Webpack으로 효율적인 코드 스플리팅 구현하기',
    like: 33,
    comment: 4,
    view: 450,
    createdAt: '2023-09-19 16:45:00',
    author: '최수정',
    content:
      '이 글에서는 Webpack을 이용해 효율적인 코드 스플리팅을 구현하는 방법에 대해 집중적으로 다룹니다. 코드 스플리팅의 필요성과 그로 인한 로딩 속도 개선 효과를 설명하며, Webpack 설정 파일을 수정하는 방법과 함께 여러 가지 최적화 기법을 구체적으로 소개합니다. 실제 프로젝트 예제를 통해 번들 크기를 줄이는 방법과 캐시 활용, 그리고 동적 import 문법 등을 상세히 다루어, 독자들이 Webpack을 통해 효율적인 웹 애플리케이션을 개발할 수 있도록 돕습니다. 이 글은 Webpack의 다양한 기능을 최대한 활용하여 성능을 극대화하는 방법에 대한 종합적인 가이드를 제공합니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  'd29ef3e9-2a6e-4c7f-8e2b-0e13f2d5c1f7': {
    title: 'Redux Toolkit으로 간편한 상태 관리 시작하기',
    like: 60,
    comment: 12,
    view: 720,
    createdAt: '2023-09-20 08:50:00',
    author: '김민지',
    content:
      'Redux Toolkit은 복잡한 상태 관리를 보다 간편하게 처리할 수 있도록 도와주는 도구입니다. 이 게시글은 Redux Toolkit의 주요 기능과 사용법, 그리고 기존 Redux와의 차별점을 상세히 설명합니다. 간결한 코드 작성과 생산성 향상을 위한 모범 사례를 다양한 실습 예제와 함께 소개하며, 초기 설정부터 고급 기능까지 폭넓게 다룹니다. 또한, 상태 관리에 대한 개념적 이해와 함께 실제 프로젝트에서의 적용 사례를 통해, 독자들이 보다 쉽게 상태 관리 문제를 해결할 수 있도록 실질적인 팁을 제공합니다.',
    image: '/src/assets/images/cat.jpeg',
  },
  '1b0f81c3-5a60-4d3a-9e8f-3a5edb4c7d12': {
    title: 'Next.js로 구축하는 SSR 웹 애플리케이션 입문',
    like: 38,
    comment: 6,
    view: 50000,
    createdAt: '2023-09-21 12:00:00',
    author: '이정훈',
    content:
      'Next.js는 서버 사이드 렌더링(SSR)을 지원하는 강력한 React 프레임워크로, SEO와 초기 로딩 속도 개선에 탁월한 성능을 보입니다. 이 글에서는 Next.js의 기본 개념과 프로젝트 설정 방법, 그리고 SSR의 작동 원리를 상세하게 설명합니다. 또한, 클라이언트와 서버 간의 데이터 전달 방식, 동적 라우팅, 그리고 최신 기능들을 활용한 웹 애플리케이션 개발 사례를 소개합니다. 독자들은 이 글을 통해 Next.js를 활용한 실전 개발 방법과 함께, SSR의 장점을 최대한 활용하는 전략을 배울 수 있습니다.',
    image: '/src/assets/images/cat.jpeg',
  },
}

